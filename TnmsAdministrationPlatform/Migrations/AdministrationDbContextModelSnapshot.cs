// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TnmsAdministrationPlatform.Data;

#nullable disable

namespace TnmsAdministrationPlatform.Migrations
{
    [DbContext(typeof(AdministrationDbContext))]
    partial class AdministrationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("TnmsAdministrationPlatform.Models.TnmsAdminGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("group_name");

                    b.HasKey("Id");

                    b.HasIndex("GroupName")
                        .IsUnique();

                    b.ToTable("tnms_admin_group");
                });

            modelBuilder.Entity("TnmsAdministrationPlatform.Models.TnmsAdminServer", b =>
                {
                    b.Property<string>("ServerName")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("server_name");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("ServerName");

                    b.ToTable("tnms_admin_server");
                });

            modelBuilder.Entity("TnmsAdministrationPlatform.Models.TnmsAdminUser", b =>
                {
                    b.Property<ulong>("SteamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("steam_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<byte>("Immunity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("immunity");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("SteamId");

                    b.ToTable("tnms_admin_user");
                });

            modelBuilder.Entity("TnmsAdministrationPlatform.Models.TnmsGroupPermissionGlobal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<int>("GroupId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("group_id");

                    b.Property<string>("PermissionNode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("permission_node");

                    b.HasKey("Id");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("idx_group_perm_global_group_id");

                    b.HasIndex("GroupId", "PermissionNode")
                        .IsUnique()
                        .HasDatabaseName("uk_group_perm_global");

                    b.ToTable("tnms_admin_group_permission_global");
                });

            modelBuilder.Entity("TnmsAdministrationPlatform.Models.TnmsGroupPermissionServer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<int>("GroupId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("group_id");

                    b.Property<string>("PermissionNode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("permission_node");

                    b.Property<string>("ServerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("server_name");

                    b.HasKey("Id");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("idx_group_perm_server_group_id");

                    b.HasIndex("ServerName")
                        .HasDatabaseName("idx_group_perm_server_name");

                    b.HasIndex("GroupId", "PermissionNode", "ServerName")
                        .IsUnique()
                        .HasDatabaseName("uk_group_perm_server");

                    b.ToTable("tnms_admin_group_permission_server");
                });

            modelBuilder.Entity("TnmsAdministrationPlatform.Models.TnmsGroupRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<int>("GroupId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("group_id");

                    b.Property<ulong>("UserSteamId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_steam_id");

                    b.HasKey("Id");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("idx_group_relation_group_id");

                    b.HasIndex("UserSteamId")
                        .HasDatabaseName("idx_group_relation_steam_id");

                    b.HasIndex("GroupId", "UserSteamId")
                        .IsUnique()
                        .HasDatabaseName("uk_group_user");

                    b.ToTable("tnms_admin_group_relation");
                });

            modelBuilder.Entity("TnmsAdministrationPlatform.Models.TnmsUserPermissionGlobal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("PermissionNode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("permission_node");

                    b.Property<ulong>("UserSteamId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_steam_id");

                    b.HasKey("Id");

                    b.HasIndex("UserSteamId")
                        .HasDatabaseName("idx_user_perm_global_steam_id");

                    b.HasIndex("UserSteamId", "PermissionNode")
                        .IsUnique()
                        .HasDatabaseName("uk_user_perm_global");

                    b.ToTable("tnms_admin_user_permission_global");
                });

            modelBuilder.Entity("TnmsAdministrationPlatform.Models.TnmsUserPermissionServer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("PermissionNode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("permission_node");

                    b.Property<string>("ServerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("server_name");

                    b.Property<ulong>("UserSteamId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_steam_id");

                    b.HasKey("Id");

                    b.HasIndex("ServerName")
                        .HasDatabaseName("idx_user_perm_server_name");

                    b.HasIndex("UserSteamId")
                        .HasDatabaseName("idx_user_perm_server_steam_id");

                    b.HasIndex("UserSteamId", "PermissionNode", "ServerName")
                        .IsUnique()
                        .HasDatabaseName("uk_user_perm_server");

                    b.ToTable("tnms_admin_user_permission_server");
                });

            modelBuilder.Entity("TnmsAdministrationPlatform.Models.TnmsGroupPermissionGlobal", b =>
                {
                    b.HasOne("TnmsAdministrationPlatform.Models.TnmsAdminGroup", "Group")
                        .WithMany("GroupPermissionGlobals")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("TnmsAdministrationPlatform.Models.TnmsGroupPermissionServer", b =>
                {
                    b.HasOne("TnmsAdministrationPlatform.Models.TnmsAdminGroup", "Group")
                        .WithMany("GroupPermissionServers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TnmsAdministrationPlatform.Models.TnmsAdminServer", "Server")
                        .WithMany("GroupPermissionServers")
                        .HasForeignKey("ServerName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("TnmsAdministrationPlatform.Models.TnmsGroupRelation", b =>
                {
                    b.HasOne("TnmsAdministrationPlatform.Models.TnmsAdminGroup", "Group")
                        .WithMany("GroupRelations")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TnmsAdministrationPlatform.Models.TnmsAdminUser", "User")
                        .WithMany("GroupRelations")
                        .HasForeignKey("UserSteamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TnmsAdministrationPlatform.Models.TnmsUserPermissionGlobal", b =>
                {
                    b.HasOne("TnmsAdministrationPlatform.Models.TnmsAdminUser", "User")
                        .WithMany("UserPermissionGlobals")
                        .HasForeignKey("UserSteamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TnmsAdministrationPlatform.Models.TnmsUserPermissionServer", b =>
                {
                    b.HasOne("TnmsAdministrationPlatform.Models.TnmsAdminServer", "Server")
                        .WithMany("UserPermissionServers")
                        .HasForeignKey("ServerName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TnmsAdministrationPlatform.Models.TnmsAdminUser", "User")
                        .WithMany("UserPermissionServers")
                        .HasForeignKey("UserSteamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TnmsAdministrationPlatform.Models.TnmsAdminGroup", b =>
                {
                    b.Navigation("GroupPermissionGlobals");

                    b.Navigation("GroupPermissionServers");

                    b.Navigation("GroupRelations");
                });

            modelBuilder.Entity("TnmsAdministrationPlatform.Models.TnmsAdminServer", b =>
                {
                    b.Navigation("GroupPermissionServers");

                    b.Navigation("UserPermissionServers");
                });

            modelBuilder.Entity("TnmsAdministrationPlatform.Models.TnmsAdminUser", b =>
                {
                    b.Navigation("GroupRelations");

                    b.Navigation("UserPermissionGlobals");

                    b.Navigation("UserPermissionServers");
                });
#pragma warning restore 612, 618
        }
    }
}
